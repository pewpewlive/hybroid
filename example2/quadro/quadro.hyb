env QuadroEntity as Level

use Pewpew
use FmathHelpers

pub entity Quadro {
  fixed x, y = 0f, 0f
  fixed velX, velY = 0.01f, 0.01f
  fixed speed = 5f

  number hitCooldownTimer

  number health = 5

  entity ship
  bool canHit

  bool isDead

  spawn(fixed x, fixed y, entity ship) {
    self.ship = ship

    SetEntityInterpolation(self, true)

    SetEntityPosition(self, x, y)

    SetEntityMesh(self, QuadroMesh, 0)
    SetEntityRadius(self, 15f)
  }

  destroy() {
    isDead = true
    canHit = false
    hitCooldownTimer = 999999999
    
    PlaySound(QuadroSound, 1, x, y)
    ExplodeEntity(self, 10)
  }

  WallCollision(fixed normalX, fixed normalY) {
    if isDead
      return;

    velX, velY = Reflect(velX, velY, normalX, normalY)
  }
  
  PlayerCollision(number playerIndex, entity shipId) {
    if IsEntityAlive(shipId) and canHit {
      velX, velY = -velX * 1.5f, -velY * 1.5f
      DamageShip(shipId, 1)
    }

    canHit = false
  }

  WeaponCollision(number playerIndex, WeaponType weaponType) -> bool {
    if isDead 
      return false

    if weaponType == WeaponType.Bullet {
      health -= 1
      if health > 0 {
        PlaySound(QuadroSound, 0, x, y)
      }
    }
    
    if health <= 0 {
      
      destroy self()
    }
  
    return true
  }

  Update() {
    x, y = GetEntityPosition(self)

    UpdateCooldown()

    Move()
  }

  fn Move() {
    fixed length = 1f
    if !isDead and IsEntityAlive(ship) {
      fixed sX, sY = GetEntityPosition(ship) 
      fixed dX, dY = sX - x, sY - y
      length = Length(dX, dY)
      Print(length)

      velX += dX / length
      velY += dY / length
      velX *= 0.9f
      velY *= 0.9f
    }
    SetEntityPosition(self, x + velX, y + velY)
  }

  fn UpdateCooldown() {
    if !canHit 
      hitCooldownTimer -= 1
    
    if hitCooldownTimer <= 0 and !canHit {
      hitCooldownTimer = 10
      canHit = true
    }
  }
}