@Environment(Level)



//fn simple_match(param text) {
//     let a = match param {
//         "b" => {
//             repeat 10 {
//                 if true {
//                     if false {
//                         yield 5
//                     }
//                 }
//                 else {
//                     yield 2
//                 }
//                 break
//             }
//             yield match param {
//                 "s" => {
//                     yield 7
//                 }
//                 _ => 5
//             }
//         }
//         _ => {
//             yield 1
//         }
//     }
// }

// fn test(param number) fixed { 
//     let testt = 12f
    
//     let sese, sese2 = match param {
//         3 => { 
//             let a = "yield  goto hyl"

//             let b = match param {
//                 3 => {
//                     yield "a"
//                 }
//                 _ => {
//                     yield "b"
//                 }
//             }
            
//             yield 228, 1 
//         }
//         4, 5 => {
//             yield 2, 3
//         }
//         //1 => 1, 2 
//         _ => {
//             //do something 

//             if true {
//                 return testt
//             }
            
//             yield 1337, 2
//         }
//     }

//     sese = 2

//     let a = match sese {
//         1 => {
//             yield 3
//         }
//         _ => {
//             yield 2
//         }
//     }

//     return testt
// }

struct Cube {
  x, y = 20.5f, 30.01f
  size = 5f

  name = "cube :3"

  health = 3

  yuppie = [new Cube(2f, 2f)]

  new(x fixed, y fixed) {
    self.x = x
    y = self.y
  }

  fn SetPos(newX fixed, newY fixed) {
    x = newX
    y = newY
  } 

  fn Move(dirX fixed, dirY fixed) {
    x += dirX + x
    y += dirY

    yuppie[0].yuppie[-322].yuppie[0].Move(2f, 2f)
  }
}

let cube = new Cube(10f, 10f)

repeat 10 with time {
  cube.SetPos(cube.x + 1f, time)
  
  if cube.y < 0f {
    cube.Move(0f, 10f)

    continue 
  }
} 