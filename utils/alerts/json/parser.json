[
  {
    "name": "ExpectedStatement",
    "type": "Error",
    "message": "expected statement"
  },
  {
    "name": "ExpectedExpression",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "expected expression %s",
    "message_format": ["Context"]
  },
  {
    "name": "UnknownStatement",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "unknown statement %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedKeyword",
    "type": "Error",
    "fields": {
      "Keyword": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "expected keyword '%s' %s",
    "message_format": ["Keyword", "Context"]
  },
  {
    "name": "ExpectedIdentifier",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "expected identifier %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedSymbol",
    "type": "Error",
    "fields": {
      "Symbol": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "expected '%s' %s",
    "message_format": ["Symbol", "Context"]
  },
  {
    "name": "MoreThanOneElseBlock",
    "type": "Error",
    "message": "cannot have more than one else block in an if statement"
  },
  {
    "name": "MoreThanOneConstructor",
    "type": "Error",
    "message": "cannot have more than one constructor in class declaration"
  },
  {
    "name": "MoreThanOneEntityFunction",
    "type": "Error",
    "fields": {
      "FunctionType": "string"
    },
    "message": "cannot have more than one %s in entity declaration",
    "message_format": ["FunctionType"]
  },
  {
    "name": "MultipleIdentifiersInCompoundAssignment",
    "type": "Error",
    "message": "cannot have more than one left-hand identifier in a compound assignment",
    "note": "compound assignments include +=, -=, *=, /=, etc."
  },
  {
    "name": "ReturnsInConstructor",
    "type": "Error",
    "message": "cannot have return types in constructor"
  },
  {
    "name": "ExpectedEnvironmentPathExpression",
    "type": "Error",
    "message": "expected environment path expression"
  },
  {
    "name": "ExpectedType",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "expected type %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedAssignmentSymbol",
    "type": "Error",
    "message": "expected assignment symbol",
    "note": "assignment symbols are: '=', '+=', '-=', '*=', '%%=', '/=', '\\\\='"
  },
  {
    "name": "ExpectedExpressionOrBody",
    "type": "Error",
    "message": "expected expression or body"
  },
  {
    "name": "ExpectedCallArgs",
    "type": "Error",
    "message": "expected call arguments"
  },
  {
    "name": "InvalidCall",
    "type": "Error",
    "message": "invalid expression to call"
  },
  {
    "name": "ExpectedCallAfterMacroSymbol",
    "type": "Error",
    "message": "expected a macro call after '@'"
  },
  {
    "name": "ExpectedFieldDeclaration",
    "type": "Error",
    "message": "expected field declaration inside struct"
  },
  {
    "name": "EmptyWrappedType",
    "type": "Error",
    "message": "wrapped types must not be empty"
  },
  {
    "name": "ExpectedReturnArgs",
    "type": "Error",
    "message": "expected return arguments after fat arrow (=>)"
  },
  {
    "name": "ExpectedAccessExpression",
    "type": "Error",
    "message": "expected an access expression",
    "note": "access expression are: identifier, environment access, self, member and field expressions"
  },
  {
    "name": "MissingIterator",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "missing iterator %s",
    "message_format": ["Context"]
  },
  {
    "name": "DuplicateKeyword",
    "type": "Error",
    "fields": {
      "Keyword": "string"
    },
    "message": "cannot have multiple '%s' keywords",
    "message_format": ["Keyword"]
  },
  {
    "name": "UnexpectedKeyword",
    "type": "Error",
    "fields": {
      "Keyword": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "unexpected keyword '%s' %s",
    "message_format": ["Keyword", "Context"]
  },
  {
    "name": "IteratorRedefinition",
    "type": "Error",
    "fields": {
      "Context": "string `default:\"\"`"
    },
    "message": "redefinition of iterator %s",
    "message_format": ["Context"]
  },
  {
    "name": "ElseIfBlockAfterElseBlock",
    "type": "Error",
    "message": "cannot have an else if block after an else block"
  },
  {
    "name": "MoreThanOneDefaultCase",
    "type": "Error",
    "message": "cannot have more than one default case in match statement"
  },
  {
    "name": "InvalidEnumVariantName",
    "type": "Error",
    "message": "enum variant name must be an identifier"
  },
  {
    "name": "InvalidExpression",
    "type": "Error",
    "fields": {
      "Type": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "'%s' not allowed %s",
    "message_format": ["Type", "Context"]
  },
  {
    "name": "SyntaxIncoherency",
    "type": "Error",
    "fields": {
      "ParsedSection": "string",
      "PreviousSection": "string",
      "AllowsNextLine": "bool"
    },
    "message": "'%s' needs to start in the same%s line as '%s'",
    "message_format": [
      "ParsedSection",
      {
        "AllowsNextLine": "func(cond bool, str string) string {{ if !cond {{ return \"\" }}; return str }}({}, \" or next\")"
      },
      "PreviousSection"
    ]
  },
  {
    "name": "InvalidMapKey",
    "type": "Error",
    "message": "expected a string as a map key"
  }
]
