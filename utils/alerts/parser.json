[
  {
    "name": "ExpectedStatement",
    "type": "Error",
    "message": "expected statement"
  },
  {
    "name": "ExpectedExpression",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "expected expression %s",
    "message_format": ["Context"]
  },
  {
    "name": "UnknownStatement",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "unknown statement %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedKeyword",
    "type": "Error",
    "params": {
      "Keyword": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "expected keyword '%s' %s",
    "message_format": ["Keyword", "Context"]
  },
  {
    "name": "ExpectedIdentifier",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "expected identifier %s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedSymbol",
    "type": "Error",
    "params": {
      "Symbol": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "expected '%s' %s",
    "message_format": ["Symbol", "Context"]
  },
  {
    "name": "MoreThanOneElseStatement",
    "type": "Error",
    "message": "cannot have more than one else statement in an if statement"
  },
  {
    "name": "MoreThanOneConstructor",
    "type": "Error",
    "message": "cannot have more than one constructor in class declaration"
  },
  {
    "name": "MoreThanOneEntityFunction",
    "type": "Error",
    "params": {
      "FunctionType": "string"
    },
    "message": "cannot have more than one %s in entity declaration",
    "message_format": ["FunctionType"]
  },
  {
    "name": "ReturnsInConstructor",
    "type": "Error",
    "message": "cannot have return types in constructor"
  },
  {
    "name": "EnvironmentRedaclaration",
    "type": "Error",
    "message": "cannot redeclare an environment"
  },
  {
    "name": "ExpectedEnvironmentPathExpression",
    "type": "Error",
    "message": "expected environment path expression"
  },
  {
    "name": "ExpectedEnvironment",
    "type": "Error",
    "message": "expected environment statement",
    "note": "environment statement has to be the first statement in any hybroid file. example: env HelloWorld as Level"
  },
  {
    "name": "ExpectedType",
    "type": "Error",
    "message": "expected type",
    "note": "this needs to be declared with a type. example: number %s",
    "note_format": ["Specifier.GetTokens()[0].Lexeme"]
  },
  {
    "name": "ExpectedAssignmentSymbol",
    "type": "Error",
    "message": "expected assignment symbol",
    "note": "assignment symbols are: '=', '+=', '-=', '*=', '%=', '/=', '\\\\='"
  },
  {
    "name": "ExpectedExpressionOrBody",
    "type": "Error",
    "message": "expected expression or body"
  },
  {
    "name": "ExpectedCallArgs",
    "type": "Error",
    "message": "expected call arguments"
  },
  {
    "name": "InvalidCall",
    "type": "Error",
    "message": "invalid expression to call"
  },
  {
    "name": "InvalidEnvironmentType",
    "type": "Error",
    "message": "expected 'Level', 'Mesh' or 'Sound' as environment type"
  },
  {
    "name": "ExpectedCallAfterMacroSymbol",
    "type": "Error",
    "message": "expected a macro call after '@'"
  },
  {
    "name": "ForbiddenTypeInEnvironment",
    "type": "Error",
    "params": {
      "Type": "string",
      "Envs": "[]string"
    },
    "message": "cannot have a %s in the following environments: %s",
    "message_format": ["Type", { "Envs": "strings.Join({}, \", \")" }]
  },
  {
    "name": "ExpectedFieldDeclaration",
    "type": "Error",
    "message": "expected field declaration inside struct"
  },
  {
    "name": "EmptyWrappedType",
    "type": "Error",
    "message": "wrapped types must not be empty"
  },
  {
    "name": "ExpectedReturnArgs",
    "type": "Error",
    "message": "expected return arguments after fat arrow (=>)"
  },
  {
    "name": "ExpectedAccessExpression",
    "type": "Error",
    "message": "expected an access expression",
    "note": "access expression are: identifier, environment access, self, member and field expressions"
  },
  {
    "name": "MissingIterator",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "missing iterator %s",
    "message_format": ["Context"]
  },
  {
    "name": "DuplicateKeyword",
    "type": "Error",
    "params": {
      "Keyword": "string"
    },
    "message": "cannot have multiple '%s' keywords",
    "message_format": ["Keyword"]
  },
  {
    "name": "UnexpectedKeyword",
    "type": "Error",
    "params": {
      "Keyword": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "unexpected keyword '%s' %s",
    "message_format": ["Keyword", "Context"]
  },
  {
    "name": "IteratorRedefinition",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "redefinition of iterator %s",
    "message_format": ["Context"]
  }
]
