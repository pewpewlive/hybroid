[
  {
    "name": "ExpectedStatement",
    "type": "Error",
    "message": "Expected statement"
  },
  {
    "name": "ExpectedExpression",
    "type": "Error",
    "message": "Expected expression"
  },
  {
    "name": "ExpectedKeyword",
    "type": "Error",
    "params": {
      "Keyword": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "Expected keyword '%s'%1s",
    "message_format": ["Keyword", "Context"]
  },
  {
    "name": "ExpectedIdentifier",
    "type": "Error",
    "params": {
      "Context": "string `default:\"\"`"
    },
    "message": "Expected identifier%1s",
    "message_format": ["Context"]
  },
  {
    "name": "ExpectedSymbol",
    "type": "Error",
    "params": {
      "Symbol": "string",
      "Context": "string `default:\"\"`"
    },
    "message": "Expected '%s'%1s",
    "message_format": ["Symbol", "Context"]
  },
  {
    "name": "MoreThanOneElseStatement",
    "type": "Error",
    "message": "Cannot have more than one else statement in an if statement"
  },
  {
    "name": "EnvironmentRedaclaration",
    "type": "Error",
    "message": "Cannot redeclare an environment"
  },
  {
    "name": "ExpectedEnvironmentPathExpression",
    "type": "Error",
    "message": "expected environment path expression"
  },
  {
    "name": "ExpectedEnvironment",
    "type": "Error",
    "message": "Expected environment statement",
    "note": "environment statement has to be the first statement in any hybroid file. example: env HelloWorld as Level"
  },
  {
    "name": "ExpectedType",
    "type": "Error",
    "message": "Expected type",
    "note": "this needs to be declared with a type. example: number %s",
    "note_format": ["Specifier.GetTokens()[0].Lexeme"]
  },
  {
    "name": "ExpectedAssignmentSymbol",
    "type": "Error",
    "message": "Expected assignment symbol",
    "note": "Assignment symbols are: '=', '+=', '-=', '*=', '%=', '/=', '\\\\='"
  },
  {
    "name": "ExpectedExpressionOrBody",
    "type": "Error",
    "message": "Expected expression or body"
  },
  {
    "name": "ExpectedCallArgs",
    "type": "Error",
    "message": "Expected call arguments"
  },
  {
    "name": "InvalidCall",
    "type": "Error",
    "message": "Invalid expression to call"
  },
  {
    "name": "InvalidEnvironmentType",
    "type": "Error",
    "message": "Expected 'Level', 'Mesh' or 'Sound' as environment type"
  },
  {
    "name": "ExpectedCallAfterMacroSymbol",
    "type": "Error",
    "message": "Expected an expression call after '@'"
  },
  {
    "name": "ForbiddenTypeInEnvironment",
    "type": "Error",
    "params": {
      "Type": "string",
      "Envs": "[]string"
    },
    "message": "Cannot have a %s in the following environments: %v",
    "message_format": ["Type", "Envs"]
  },
  {
    "name": "ExpectedFieldDeclaration",
    "type": "Error",
    "message": "Expected field declaration inside struct"
  },
  {
    "name": "EmptyWrappedType",
    "type": "Error",
    "message": "Wrapped types must not be empty"
  },
  {
    "name": "ExpectedReturnArgs",
    "type": "Error",
    "message": "Expected return arguments after fat arrow (=>)"
  },
  {
    "name": "UnknownStatementInsideClass",
    "type": "Error",
    "message": "Unknown statement inside class"
  },
  {
    "name": "ExpectedAccessExpression",
    "type": "Error",
    "message": "Expected an access expression",
    "note": "Access expression are: identifier, environment access, self, member and field expressions"
  },
  {
    "name": "NoIteratorProvidedInForLoopStatement",
    "type": "Error",
    "message": "No Iterator provided in for loop statement"
  },
  {
    "name": "DuplicateKeywordInRepeatStatement",
    "type": "Error",
    "params": {
      "Keyword": "string"
    },
    "message": "Cannot have duplicate keyword (%s) in repeat statement",
    "message_format": ["Keyword"]
  },
  {
    "name": "RedefinitionOfIteratorInRepeatStatement",
    "type": "Error",
    "message": "Redefinition of iterator in repeat statement"
  },
  {
    "name": "UnknownStatementInsideEntity",
    "type": "Error",
    "message": "Unknown statement inside class"
  },
  {
    "name": "MissingIteratorInRepeatStatement",
    "type": "Error",
    "message": "Missing iterator in repeat statement"
  }
]
