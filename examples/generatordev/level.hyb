env Main as Level

let a = struct{
    field1 = 1
}

a.field1 = 3

class thing {
    fixed b
    new(){}
}

let b = new thing()
b.b = 9fx

entity thing2 {
    fixed p
    thing2 o
    spawn(fixed x, y){
        o = spawn thing2()
    }
    destroy(){}
}

let c = spawn thing2(100f, 100f)
c.o.p = 9fx

// fn funny2() -> fixed {
//     return 1f
// }

// fn funny() -> (fixed, fixed) {
//     return 1f, 2f
// }

// let a, n, b, c, d = funny2(), 1, funny(), funny2()
// a, b, c, b, d += funny(), 1fx, 2fx, 3fx

// class thing {
//     let o = fn(){}
//     let i = [fn() {
//         funny()

//         let a = 2

//         if a == 2 {
            
//         }
//     }]
//     let foo, bar, e = funny(), a
//     fixed a
    
//     new(){
//         funny()
//     }

//     fn method() -> thing {
//         return self
//     }
// }

// let thingthing = new thing()

// // thingthing.a = 9fx
// // thingthing.o()
// // thingthing.i[1] = fn(){}
// // thingthing.method()

// let map = {"o" = thingthing}

// //map["o"].method()

// map["0"].method().i[1]()

// entity example {
//     let o = 2

//     spawn(fixed x, y) {
//         funny()
//     }
//     destroy() {}
// }

// enum test {
//     field1,
//     field2
// }

// let test2 = test.field2

// fn SetEntityPosition(fixed o) {
//     if o >  20fx {
//         return
//     }
// }

// SetEntityPosition(9fx)

// let test3 = Pewpew:CannonFreq.Freq15

// Fmath:RandomFixed(0fx, 100fx)

// let o = 0b111 >> 0b000

// entity id = Pewpew:NewEntity(100fx, 100fx)
// Pewpew:SetEntityMesh(id, Mesh, 0)

// fn test4(number a) {

// }

// test4(match o {
//     0b000, 0b100 => 2
//     else => 4
// })

// let oo = match o {
//     0b000, 0b100 => true
//     else => false
// }

// match oo {
//     true => {
//         break
//     }
//     else => {
//         break
//     }
// }