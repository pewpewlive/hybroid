@Environment(Level)

struct Rectangle {
    width = 0f
    
    test2 = fn (yes fixed) fixed {
        return yes
    }
    
    new(width fixed, height fixed) {
        //self.width = width
        //self.height = height
    }
    
    height = 0f

    fn area() fixed { 
        //self.test()
        return self.width * self.height
    }

    fn test()  {
        //self.test2 = self.test2
        //self.test2(self.test2(self.area()))
    }// to make debugging process easier
}

struct Yes {
    rect: Rectangle

    a = self
    b = self
    c = {
        wow: fn (yes Yes) {

        }
    }

    new() {

    }

    fn GetRectangle() Rectangle {
        return self.rect
    }
} 

fn test(param text) map<Yes> {
    match param {
        "a" => {
            let a = 1
        }

        "b" => {
            let testt = new Yes()
        }

        _ => {

        }
    }

    return {
        xd: new Yes(),
        sdsd: new Yes()
    }
}

test("b")["xd"].a.b.c["wow"](test("a")["sdsd"])
