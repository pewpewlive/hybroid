env QuadroEntity as Level

use Pewpew

pub entity Quadro {
  fixed x, y = 0f, 0f
  fixed velX, velY = 0.01f, 0.01f

  number hitCooldownTimer
  number hitCooldown = 10

  number health = 5

  entity ship
  bool canHit

  bool isDead

  spawn(fixed x, fixed y, entity ship) {
    self.ship = ship

    SetEntityInterpolation(self, true)

    SetEntityPosition(self, x, y)

    SetEntityMesh(self, QuadroMesh, 0)
    SetEntityRadius(self, 15f)
  }

  destroy() {
    PlaySound(QuadroSound, 1, x, y)
    ExplodeEntity(self, 10)
  }

  WallCollision(fixed normalX, fixed normalY) {
    velX = -velX * 0.8f
    velY = -velY * 0.8f
  }
  
  PlayerCollision(number playerIndex, entity shipId) {
    if IsEntityAlive(shipId) and canHit {
      DamageShip(shipId, 1)
    }

    canHit = false
  }

  WeaponCollision(number playerIndex, WeaponType weaponType) -> bool {
    if weaponType == WeaponType.Bullet {
      health -= 1
      if health > 0 {
        PlaySound(QuadroSound, 0, x, y)
      }
    }
    
    if health <= 0 and !isDead {
      isDead = true
      destroy self()
    }

    return true
  }

  Update() {
    x, y = GetEntityPosition(self)

    UpdateCooldown()

    Move()
  }

  fn Move() {
    if !isDead and IsEntityAlive(ship) {
      fixed sX, sY = GetEntityPosition(ship) 

      fixed dirX, dirY = FmathHelpers:Normalize(sX - x, sY - y)
      
      velX += dirX * 3f 
      velY += dirY * 3f
    }

    SetEntityPosition(self, x + velX * 10f, y + velY * 10f)
  }

  fn UpdateCooldown() {
    hitCooldownTimer -= 1
    
    if hitCooldownTimer <= 0 {
      hitCooldownTimer = hitCooldown
      canHit = true
    }
  }
}