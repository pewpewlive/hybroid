@Environment(Level)

struct Test {
    mega = {
        b: {
            c: {
                xd: fn (yes fixed) { 

                }
            }
        }
    }

    new() {
    }

    fn super(xd fixed) {

    }
}

let aa = new Test() 

let amap = { b: fn (param fixed) {} }
amap = {
    b : fn (param fixed) {}
}

let tests = {a: aa}

tests["a"].mega["b"]["c"]["xd"](23f)

// like, i have no idea why identifier is nil nice
// I KNOW WHY
// WE GOTTA LIKE, LOOK
/*
if aa.test() == false {

}
*/
/*
let testa = {
    b: {
        c: {
            s: {
                
            }
        }
    }
}

let she = ["b"]

fn ah(param bool) {
    param = true
}

ah(testa[she[0]]["c"]["s"])
*/

/*
let dfs = fn () {
    if true {

    }
}

struct Rectangle {
    
    test = {a: {b: {c: 1}}}
    xdsd = 23f
    test2 = {a: {b: {c: 1}}}
    thing = fn () {
        if true {
            
        }
    }
    
    
    new(widthasdasd fixed, heigh fixed) {
        self.test["a"]["b"]["c"] = 1
        self.xd() 
        self.xdsd = 231d
        self.test2["a"]["b"]["c"] = 1 // generate
    } 

    fn test2tiyu() {//test defined multiple times, wait keep it, lets see if compiler detects
        
    } // ima check the lua file 

    fn xd() { 
        //self.yes()
    } // anyway let me test ssmth

    fn yes() { 
        //self.xd()
    } // ok
}
*/