env Huh as Level
// hello

// let number a = 1

fn test(number param) bool, bool {
    if param < 0 {
        return true, false
    }else if param == 0 {
        return false, false
    }

    match param {
        0 => {
            return false, true
        }
    }

    return true, true
}

let uh = fn() fixed {
    return 1f
}

let tesst = struct{
    number Field1 = 10
    Field2 = true
}

fn anonStructTest(struct{number Field1, bool Field2} uh) bool {
    if uh.Field1 == 10 {
        return false
    }
    return true
} 

anonStructTest(tesst)

struct StructTest {
    fixed field1 = 0f

    new(fixed param) {
        if param == 0f {
            field1 = 100f
        }else {
            self.field1 = 9d
        }
    }

    fn foo(bool param, number param2) bool, bool {
        return match param {
            true => test(param2)
            _ => {
                if asdojasd {
                    yield true, true
                }
            }
        }
    }
}

let p = new StructTest(10f)

p.field1 = 1f

let b, a = p.foo(true, 1)

while true {
    if false {
    }
    let a = 1
}

let testmap = {a = 2, b = 3}

for k, v in testmap {
    break
}

let list = [1,2,3]

for i, v in list {
    if i == 2 {
        goto asdas
    }
    let a = match v {
        0 => "asd"
    }

    ::asdas::
}

enum TestEnum {
    One,
    Two,
    Three,
    NA
}

let TestEnum uhhh = TestEnum.Three

fn test2(TestEnum param1) TestEnum {
    match param1 {
        TestEnum.One => TestEnum.Two
        TestEnum.Two => TestEnum.Three
        TestEnum.Three => TestEnum.One
    }
    return TestEnum.NA
}

test2(uhhh)